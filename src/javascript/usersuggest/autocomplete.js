// @ use_closure_library=true
// Copyright 2011 Friday Film Club All Rights Reserved.

/**
 * @fileoverview Auto complete for Movies data.
 *
 * @author adamjmcgrath@gmail.com (Adam Mcgrath)
 */

goog.provide('ffc.usersuggest.AutoComplete');

goog.require('ffc.usersuggest.RemoteArrayMatcher');
goog.require('ffc.template.user');

goog.require('goog.array');
goog.require('goog.dom');
goog.require('goog.json');
goog.require('goog.ui.ac.AutoComplete');
goog.require('goog.ui.ac.Renderer');
goog.require('goog.ui.ac.RichInputHandler');

goog.require('soy');


/**
 * AutoComplete constructor.
 * @param {HTMLInputElement} el The input element to decorate.
 * @param {Element} parent The element to render the autocomplete in.
 * @constructor
 */
ffc.usersuggest.AutoComplete = function(el, parent) {
  // Create a custom renderer that renders rich rows.
  // The renderer calls row.render(node, token) for each row.
  var customRenderer = {};
  customRenderer.renderRow = function(row, token, node) {
    soy.renderElement(node, ffc.template.user.searchResult, row.data);
    row.data.toString = function() {
      return row.data['username'];
    };
    row.data.select = function() {};
  };

  /**
   * A standard renderer that uses a custom row renderer to display the
   * rich rows generated by this autocomplete widget.
   * @type {goog.ui.AutoComplete.Renderer}
   * @private
   */
  this.renderer_ = new goog.ui.ac.Renderer(parent, customRenderer);

  /**
   * A matcher the takes a uri to a user search endpoint and returns an object
   * to use in the renderer.
   * @type {ffc.usersuggest.RemoteArrayMatcher}
   * @private
   */
  this.matcher_ = new ffc.usersuggest.RemoteArrayMatcher(
      ffc.usersuggest.AutoComplete.API_URL_);

  var inputHandler = new goog.ui.ac.RichInputHandler(
      null, null, false, 300);

  goog.ui.ac.AutoComplete.call(this, this.matcher_, this.renderer_,
      inputHandler);

  inputHandler.attachAutoComplete(this);
  inputHandler.attachInputs(el);
};
goog.inherits(ffc.usersuggest.AutoComplete, goog.ui.ac.AutoComplete);
goog.exportSymbol('ffc.usersuggest.AutoComplete', ffc.usersuggest.AutoComplete);


/**
 * @type {string}
 * @private
 */
ffc.usersuggest.AutoComplete.API_URL_ = '/api/users';
